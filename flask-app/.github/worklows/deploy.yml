name: CI/CD Pipeline for Docker Deployment
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: my-app # Replace with your app name
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker environment
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Step 4: Build Docker image and push to DockerHub 
      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest -f ./flask-app/app/Dockerfile ./flask-app/app
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

      # Step 5: Add SSH key to connect to the deployment server
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 6: Deploy to server
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd /path/to/your/project

            # Pull the latest Docker image from DockerHub
            docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

            # Transfer docker-compose.yml to the server (if needed)
            scp /path/to/local/docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }}:/path/to/your/project/docker-compose.yml

            # Rebuild and run containers with the updated image
            docker-compose down
            docker-compose up --build -d
          EOF
